{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "84c09f74",
   "metadata": {
    "papermill": {
     "duration": 0.002606,
     "end_time": "2024-08-26T09:53:47.800491",
     "exception": false,
     "start_time": "2024-08-26T09:53:47.797885",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "581f631e",
   "metadata": {
    "papermill": {
     "duration": 0.001757,
     "end_time": "2024-08-26T09:53:47.804524",
     "exception": false,
     "start_time": "2024-08-26T09:53:47.802767",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Basic Python Codes**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "864efc9c",
   "metadata": {
    "_cell_guid": "55804fb7-a77f-4457-965e-17f54af1b75d",
    "_uuid": "0672724b-4ae1-4bf1-84b6-2cf014c970ce",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-08-26T09:53:47.810887Z",
     "iopub.status.busy": "2024-08-26T09:53:47.810444Z",
     "iopub.status.idle": "2024-08-26T09:53:47.838000Z",
     "shell.execute_reply": "2024-08-26T09:53:47.836467Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.034371,
     "end_time": "2024-08-26T09:53:47.841028",
     "exception": false,
     "start_time": "2024-08-26T09:53:47.806657",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mühendislik Fakültesi 1. öğrenci:Ali\n",
      "Mühendislik Fakültesi 2. öğrenci:Veli\n",
      "Mühendislik Fakültesi 3. öğrenci:Ayşe\n",
      "Tıp Fakültesi 1. öğrenci:Talat\n",
      "Tıp Fakültesi 2. öğrenci:Zeynep\n",
      "Tıp Fakültesi 3. öğrenci:Ece\n",
      "Kredisi 3 olan CMP1005 kodlu dersin kontenjanı 30 kişidir.\n",
      "Kredisi 4 olan PSY1001 kodlu dersin kontenjanı 75 kişidir.\n",
      "Kredisi 2 olan HUK1005 kodlu dersin kontenjanı 150 kişidir.\n",
      "Kredisi 4 olan SEN2204 kodlu dersin kontenjanı 25 kişidir.\n",
      "{'function', 'miuul', 'qcut', 'lambda'}\n"
     ]
    }
   ],
   "source": [
    "###############################################\n",
    "# Python Alıştırmalar\n",
    "###############################################\n",
    "\n",
    "###############################################\n",
    "# GÖREV 1: Veri yapılarının tipleriniz inceleyiniz.\n",
    "###############################################\n",
    "\n",
    "x = 8\n",
    "type(x)\n",
    "\n",
    "\n",
    "y = 3.2\n",
    "type(y)\n",
    "\n",
    "z = 8j + 18\n",
    "type(z)\n",
    "\n",
    "a = \"Hello World\"\n",
    "type(a)\n",
    "\n",
    "b = True\n",
    "type(b)\n",
    "\n",
    "c = 23 < 22\n",
    "type(c)\n",
    "\n",
    "\n",
    "l = [1, 2, 3, 4,\"String\",3.2, False]\n",
    "type(l)\n",
    "\n",
    "\n",
    "d = {\"Name\": \"Jake\",\n",
    "     \"Age\": [27,56],\n",
    "     \"Adress\": \"Downtown\"}\n",
    "type(d)\n",
    "\n",
    "t = (\"Machine Learning\", \"Data Science\")\n",
    "type(t)\n",
    "\n",
    "\n",
    "s = {\"Python\", \"Machine Learning\", \"Data Science\",\"Python\"}\n",
    "type(s)\n",
    "\n",
    "\n",
    "\n",
    "###############################################\n",
    "# GÖREV 2: Verilen string ifadenin tüm harflerini büyük harfe çeviriniz. Virgül ve nokta yerine space koyunuz, kelime kelime ayırınız.\n",
    "###############################################\n",
    "\n",
    "text = \"The goal is to turn data into information, and information into insight.\"\n",
    "text.upper().replace(\",\",\" \").replace(\".\",\" \").split()\n",
    "\n",
    "\n",
    "\n",
    "###############################################\n",
    "# GÖREV 3: Verilen liste için aşağıdaki görevleri yapınız.\n",
    "###############################################\n",
    "\n",
    "lst = [\"D\",\"A\",\"T\",\"A\",\"S\",\"C\",\"I\",\"E\",\"N\",\"C\",\"E\"]\n",
    "\n",
    "# Adım 1: Verilen listenin eleman sayısına bakın.\n",
    "len(lst)\n",
    "\n",
    "# Adım 2: Sıfırıncı ve onuncu index'teki elemanları çağırın.\n",
    "lst[0]\n",
    "lst[10]\n",
    "\n",
    "# Adım 3: Verilen liste üzerinden [\"D\",\"A\",\"T\",\"A\"] listesi oluşturun.\n",
    "lst[0:4]\n",
    "\n",
    "# Adım 4: Sekizinci index'teki elemanı silin.\n",
    "lst.pop(8)\n",
    "\n",
    "# Adım 5: Yeni bir eleman ekleyin.\n",
    "lst.append(\"CC\")\n",
    "\n",
    "\n",
    "# Adım 6: Sekizinci index'e  \"N\" elemanını tekrar ekleyin.\n",
    "lst.insert(8,\"N\")\n",
    "\n",
    "\n",
    "###############################################\n",
    "# GÖREV 4: Verilen sözlük yapısına aşağıdaki adımları uygulayınız.\n",
    "###############################################\n",
    "\n",
    "dict = {'Christian': [\"America\",18],\n",
    "        'Daisy':[\"England\",12],\n",
    "        'Antonio':[\"Spain\",22],\n",
    "        'Dante':[\"Italy\",25]}\n",
    "\n",
    "\n",
    "# Adım 1: Key değerlerine erişiniz.\n",
    "\n",
    "dict.keys()\n",
    "\n",
    "# Adım 2: Value'lara erişiniz.\n",
    "\n",
    "dict.values()\n",
    "\n",
    "# Adım 3: Daisy key'ine ait 12 değerini 13 olarak güncelleyiniz.\n",
    "dict[\"Daisy\"][1]=13\n",
    "\n",
    "\n",
    "# Adım 4: Key değeri Ahmet value değeri [Turkey,24] olan yeni bir değer ekleyiniz.\n",
    "dict.update({\"Ahmet\":[\"Turkey\",24]})\n",
    "\n",
    "\n",
    "# Adım 5: Antonio'yu dictionary'den siliniz.\n",
    "del dict[\"Antonio\"]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "###############################################\n",
    "# GÖREV 5: Arguman olarak bir liste alan, listenin içerisindeki tek ve çift sayıları ayrı listelere atıyan ve bu\n",
    "# listeleri return eden fonskiyon yazınız.\n",
    "###############################################\n",
    "\n",
    "l = [2,13,18,93,22]\n",
    "\n",
    "def list_control(l):\n",
    "    tek=[]\n",
    "    cift=[]\n",
    "    for item in l:\n",
    "        if item % 2 == 0:\n",
    "            cift.append(item)\n",
    "        else:\n",
    "            tek.append(item)\n",
    "    return tek,cift\n",
    "\n",
    "list_control(l)\n",
    "\n",
    "###############################################\n",
    "# GÖREV 6: Aşağıda verilen listede mühendislik ve tıp fakülterinde dereceye giren öğrencilerin isimleri bulunmaktadır.\n",
    "# Sırasıyla ilk üç öğrenci mühendislik fakültesinin başarı sırasını temsil ederken son üç öğrenci de tıp fakültesi öğrenci sırasına aittir.\n",
    "# Enumarate kullanarak öğrenci derecelerini fakülte özelinde yazdırınız.\n",
    "###############################################\n",
    "\n",
    "ogrenciler = [\"Ali\",\"Veli\",\"Ayşe\",\"Talat\",\"Zeynep\",\"Ece\"]\n",
    "\n",
    "\n",
    "for index,ogr in enumerate(ogrenciler):\n",
    "\n",
    "    if index<=2:\n",
    "\n",
    "        print(\"Mühendislik Fakültesi \" + str(index+1) + \". öğrenci:\" + ogr)\n",
    "      \n",
    "    else:\n",
    "        print(\"Tıp Fakültesi \" + str(index-2) + \". öğrenci:\" + ogr)\n",
    "\n",
    "###############################################\n",
    "# GÖREV 7: Aşağıda 3 adet liste verilmiştir. Listelerde sırası ile bir dersin kodu, kredisi ve kontenjan bilgileri yer almaktadır. Zip kullanarak ders bilgilerini bastırınız.\n",
    "###############################################\n",
    "\n",
    "ders_kodu = [\"CMP1005\",\"PSY1001\",\"HUK1005\",\"SEN2204\"]\n",
    "kredi = [3,4,2,4]\n",
    "kontenjan = [30,75,150,25]\n",
    "l = list(zip(kredi, ders_kodu,kontenjan))\n",
    "for i in l:\n",
    "    print(\"Kredisi \"+ str(i[0]) + \" olan \"+ str(i[1])+ \" kodlu dersin kontenjanı \"+str(i[2]) +\" kişidir.\")\n",
    "\n",
    "\n",
    "\n",
    "###############################################\n",
    "# GÖREV 8: Aşağıda 2 adet set verilmiştir.\n",
    "# Sizden istenilen eğer 1. küme 2. kümeyi kapsiyor ise ortak elemanlarını eğer kapsamıyor ise 2. kümenin 1. kümeden farkını yazdıracak fonksiyonu tanımlamanız beklenmektedir.\n",
    "###############################################\n",
    "\n",
    "kume1 = set([\"data\", \"python\"])\n",
    "kume2 = set([\"data\", \"function\", \"qcut\", \"lambda\", \"python\", \"miuul\"])\n",
    "\n",
    "def diff(kume1,kume2):\n",
    "    if kume1.issuperset(kume2):\n",
    "        print(kume1.intersection(kume2))\n",
    "    else:\n",
    "        print(kume2.difference(kume1))\n",
    "\n",
    "diff(kume1,kume2)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.297517,
   "end_time": "2024-08-26T09:53:48.264569",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-26T09:53:44.967052",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
